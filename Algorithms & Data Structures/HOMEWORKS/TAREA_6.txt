/**-------------------------------------------------------------------------------------------------------------------- //
 * Programa: Evaluación de Expresiones Multivariable
 * Algoritmo Implementado: Shunting Yard
 *
 * Descripción: El presente software permite evaluar expresiones matemáticas ya sean 
 * simples (aritméticas) o incluso algebraicas de 1 o más variables, 
 * cuyo valor contenido puede ser entero o decimal. Los operadores aceptados
 * se encuentran en la clase estática <code>Operators</code> contenida dentro de 
 * la clase <code>Expression</code>.
 *
 * NOTA IMPORTANTE: 
 * 1.- El algoritmo cuenta con una modificación para permitir las 
 * operaciones con números negativos {@see Expression#parseNegativeNumbers}.
 * 2.-Esta versión no soporta funciones trigonometricas o alguna otra
 * función u operador que no esté presente dentro del código fuente.
 *
 * @author Michael Brandon Serrato Guerrero <mikebsg01@gmail.com> - Expediente: 258849
 * @see {@link https://github.com/mikebsg01|Github_Profile}
 * @see {@link https://es.wikipedia.org/wiki/Algoritmo_shunting_yard|Shunting_Yard_Algorithm}
 * @version 1.0.0
 * -------------------------------------------------------------------------------------------------------------------- //
 */
#include <iostream>
#include <cstdio>
#include <stdexcept>
#include <string>
#include <cmath>

using namespace std;

template <typename T>
class Stack {
public:    
    class stackNode {
    public:
        T element;
        stackNode* next;
    };
private:
    stackNode* head;
    int elementCount;

    stackNode* newNode() {
        stackNode *newNode = new stackNode;
    
        if (!newNode) {
            throw runtime_error("ERROR - Stack<>::newNode(): no memory available.");
        }
    
        return newNode;
    }
public:
    Stack();
    ~Stack();
    T top() const;
    void push(T const& element);
    void pop();
    inline bool empty() const;
    inline int size() const;
};

template <typename T>
class Vector {
private:
    T* vector;
    int elementCount;
public:
    Vector(int size = 0, T defaultValue = T());
    inline bool empty() const;
    void push_back(T const& element);
    T& operator[](int const& position) const;
    inline int size() const;
    int find(T const& element) const;
};

template <typename TX, typename TY>
class Pair {
public:
    TX x;
    TY y;
};

class Expression {
private:
    string expression;
public:
    class Operators {
    public:
        static const char LEFT_PARENTHESIS = '(';
        static const char RIGHT_PARENTHESIS = ')';
        static const char SUM = '+';
        static const char SUBTRACTION = '-';
        static const char MULTIPLICATION = '*';
        static const char DIVISION = '/';
        static const char POWER = '^';
    };

    class RPN {
    private:
        Vector<string> elements;
    public:
        RPN(Vector<string> const& elements);
        Vector<string> getElements() const;
        string toString() const;
    };

    Expression(string expression = string());
    ~Expression();
    static void removeSpaces(string& expression);
    static void addMissingMultiplicationSigns(string& expression);
    static void parseNegativeNumbers(string &expression);
    static bool isVariable(const char c);
    static bool isNumber(const char c);
    static bool isNumber(const string s);
    static bool isOperator(const char c);
    static bool isParenthesis(const char c);
    static int toDigit(const char c);
    static double toNumber(string strNumber);
    static int getOperatorPrecedence(const char operatorChar);
    static int getOperatorPrecedenceOnStack(const char operatorChar);
    static int compareOperatorPrecedence(const char operatorX, const char operatorY);
    static int getOperatorAssociativity(const char operatorChar);
    Expression* setExpression(string expression);
    string getExpression() const;
    Vector<char> getVariables() const;
    int countVariables() const;
    RPN& getRPN() const;
    double eval(Vector<Pair<char, double> > values) const;
};

int main() {
    Expression expression;
    Vector<char> variables;
    Vector<Pair<char, double> > values;
    Pair<char, double> temp;
    string s;
    double v;
    int i;

    cout << "\n\tEVALUACION DE EXPRESIONES\n\n\tAutor: Michael Serrato <mikebsg01@gmail.com>\n\n"
        << "Introduzca la expresion: ";
    getline(cin, s);
    cout << "\n";

    expression.setExpression(s);
    variables = expression.getVariables();

    for (i = 0; i < variables.size(); ++i) {
        cout << "Introduzca el valor de \"" << variables[i] << "\": ";
        cin >> v;
        temp.x = variables[i];
        temp.y = v;
        values.push_back(temp);
    }

    cout << "\nExpresion en Infijo: " << expression.getExpression() << "\n"
        << "Expresion en Postfijo: " << expression.getRPN().toString() << "\n";

    printf("Resultado de Evaluacion: %.6f\n", expression.eval(values));
    return 0;
}

template <typename T>
Stack<T>::Stack() {
    this->head = NULL;
    this->elementCount = 0;
}

template <typename T>
Stack<T>::~Stack() {
    while (!this->empty()) {
        this->pop();
    }
}

template <typename T>
inline bool Stack<T>::empty() const {
    return head == NULL;
}

template <typename T>
T Stack<T>::top() const {
    if (this->empty()) {
        throw out_of_range("ERROR - Stack<>::top(): empty stack.");
    }

    return head->element;
}

template <typename T>
void Stack<T>::push(T const& element) {
    stackNode* temp;

    temp = newNode();
    temp->element = element;
    temp->next = head;
    head = temp;
    ++this->elementCount;
}

template <typename T>
void Stack<T>::pop() {
    if (this->empty()) {
        throw out_of_range("ERROR - Stack<>::pop(): empty stack.");
    }

    stackNode *temp;

    temp = head->next;
    delete head;
    head = temp;
    --this->elementCount;
}

template <typename T>
inline int Stack<T>::size() const {
    return this->elementCount;
}

template <typename T>
Vector<T>::Vector(int size, T defaultValue) {
    this->elementCount = 0;
    int i = 0;

    if (size > 0) {
        this->vector = new T[size];

        if (this->vector) {
            throw runtime_error("ERROR - Vector<>::Vector(): no memory available.");
        }

        for (i = 0; i < size; ++i) {
            this->vector[i] = (T) defaultValue;
        }
    }

    this->elementCount = size;
}

template <typename T>
void Vector<T>::push_back(T const& element) {
    size_t n = this->size();
    T* temp = new (nothrow) T[n + 1];

    if (!temp) {
        throw runtime_error("ERROR - Vector<>::push_back(): no memory available.");
    }

    if (n > 0) {
        copy(this->vector, this->vector + n, temp);
        delete[] this->vector;
    }

    this->vector = temp;
    this->vector[n] = element;
    ++this->elementCount;
}

template <typename T>
inline bool Vector<T>::empty() const {
    return this->elementCount == 0;
}

template <typename T>
inline int Vector<T>::size() const {
    return this->elementCount;
}

template <typename T>
int Vector<T>::find(T const& element) const {
    int i;

    for (i = 0; i < this->size(); ++i) {
        if (this->vector[i] == element) {
            return i;
        }
    }
    return -1;
}

template <typename T>
T& Vector<T>::operator[](int const& position) const {
    if (position < 0 or position >= this->size()) {
        throw out_of_range("ERROR - Vector<>::operator[]: position entered out of range.");
    }

    return this->vector[position];
}

Expression::RPN::RPN(Vector<string> const& elements) {
    this->elements = elements;
}

Vector<string> Expression::RPN::getElements() const {
    return this->elements;
}

string Expression::RPN::toString() const {
    string str;
    int i;

    for (i = 0; i < elements.size(); ++i) {
        str += elements[i];
    }
    return str;
}

Expression::Expression(string expression) {
    this->setExpression(expression);
}

Expression::~Expression() {
    (this->expression).clear();
}

void Expression::removeSpaces(string& expression) {
    int i;

    for (i = 0; i < expression.size(); ++i) {
        if (expression[i] == ' ') {
            expression.erase(i, 1);
            --i;
        }
    }
}

void Expression::addMissingMultiplicationSigns(string& expression) {
    int i;
    char c1, c2;
    string s("");

    for (i = 0; i < expression.size(); ++i) {
        c1 = expression[i];

        if (isVariable(c1) and (i > 0 and 
             isNumber((c2 = expression[i - 1])) or
             isVariable(c2) or c2 == Operators::RIGHT_PARENTHESIS)) {
            s += "*";
        }
        s += c1;
    }
    expression = s;
}

void Expression::parseNegativeNumbers(string& expression) {
int i, j;
char c1, c2, c3;
string s1("");

for (i = 0; i < expression.size(); ++i) {
    c1 = expression[i];

    if (c1 == Operators::SUBTRACTION and
        (i == 0 or (c2 = expression[i - 1]) == Operators::LEFT_PARENTHESIS or
        (isOperator(c2) and c2 != Operators::RIGHT_PARENTHESIS))) {
        j = i + 1;
        c3 = expression[j];

        if (c3 == Operators::LEFT_PARENTHESIS) {
            int openParenthesis = 1;
            char c4;
            s1 += "(0-(";

            while (openParenthesis > 0) {
                ++j;
                c4 = expression[j];
                s1 += c4;

                if (c4 == Operators::LEFT_PARENTHESIS) {
                    ++openParenthesis;
                } else if (c4 == Operators::RIGHT_PARENTHESIS) {
                    --openParenthesis;
                }
            }

            s1 += ")";
            i = j;
        } else if (isVariable(c3)) {
                s1 += "(0-" + string(1, c3) + ")";
                i = j;
        } else if (isNumber(c3)) {
            s1 += "(0-";

            while (isNumber(expression[j])) {
                s1 += expression[j];
                ++j;
            }

            s1 += ")";
            i = j - 1;
        }
        continue;
    }
    s1 += c1;
}
expression = s1;
}

bool Expression::isVariable(const char c) {
    return c >= 'a' and c <= 'z';
}

bool Expression::isNumber(const char c) {
    return (c >= '0' and c <= '9') or c == '.';
}

bool Expression::isNumber(const string str) {
    int i;

    for (i = 0; i < str.size(); ++i) {
        if (!isNumber(str[i])) {
            return false;
        }
    }
    return true;
}

bool Expression::isOperator(const char c) {
    return isParenthesis(c) or 
        c == Operators::SUM or 
        c == Operators::SUBTRACTION or 
        c == Operators::MULTIPLICATION or 
        c == Operators::DIVISION or 
        c == Operators::POWER;
}

bool Expression::isParenthesis(const char c) {
    return c == Operators::LEFT_PARENTHESIS or 
        c == Operators::RIGHT_PARENTHESIS;
}

inline int Expression::toDigit(const char c) {
    return ((int)(c-'0'));
}

double Expression::toNumber(string strNumber) {
    int i;
    double num = 0, tmp = 0, factor = 0.1;
    bool floatingPoint = false;

    for (i = 0; i < strNumber.length(); ++i) {
        if (strNumber[i] == '.') {
            floatingPoint = true;
            continue;
        }

        if (isNumber(strNumber[i])) {
            tmp = toDigit(strNumber[i]);

            if (!floatingPoint) {
                num = (num * 10) + tmp;
            } else {
                num = num + (tmp * factor);
                factor *= 0.1;
            }
        }
    }
    return num;
}

int Expression::getOperatorPrecedence(const char operatorChar) {
    if (!isOperator(operatorChar)) {
        throw invalid_argument("ERROR - Expression::getOperatorPrecedence(): the argument is not a valid operator.");
    }

    if (operatorChar == Operators::LEFT_PARENTHESIS) {
        return 5;
    } else if (operatorChar == Operators::POWER) {
        return 4;
    } else if (operatorChar == Operators::MULTIPLICATION or 
            operatorChar == Operators::DIVISION) {
        return 3;
    } else if (operatorChar == Operators::SUM or 
            operatorChar == Operators::SUBTRACTION) {
        return 2;
    }
}

int Expression::getOperatorPrecedenceOnStack(const char operatorChar) {
    if (!isOperator(operatorChar)) {
        throw invalid_argument("ERROR - Expression::getOperatorPrecedenceOnStack(): the argument is not a valid operator.");
    }

    if (operatorChar == '(') {
        return 1;
    }

    return getOperatorPrecedence(operatorChar);
}

int Expression::compareOperatorPrecedence(const char operatorX, const char operatorY) {
    if (!isOperator(operatorX) or !isOperator(operatorY)) {
        throw invalid_argument("ERROR - Expression::compareOperatorPrecedence(): arguments are not valid operators.");
    }

    int priorityX = getOperatorPrecedence(operatorX),
        priorityY = getOperatorPrecedenceOnStack(operatorY);

    if (priorityX < priorityY) {
        return -1;
    } else if (priorityX == priorityY) {
        return 0;
    } else if (priorityX > priorityY) {
        return 1;
    }
}

int Expression::getOperatorAssociativity(const char operatorChar) {
    if (operatorChar == Operators::POWER) {
        return -1;
    }
    return 1;
}

Expression* Expression::setExpression(string expression) {
    int i;

    for (i = 0; i < expression.length(); ++i) {
        expression[i] = tolower(expression[i]);
    }

    this->expression = expression;
    this->removeSpaces(this->expression);
    this->parseNegativeNumbers(this->expression);
    this->addMissingMultiplicationSigns(this->expression);
    return this;
}

string Expression::getExpression() const {
    return this->expression;
}

Vector<char> Expression::getVariables() const {
    Vector<char> variables;
    int i = 0;
    char c;

    for (i = 0; i < (this->expression).length(); ++i) {
        c = this->expression[i];

        if (this->isVariable(c) and variables.find(c) == -1) {
            variables.push_back(c);
        }
    }

    return variables;
}

int Expression::countVariables() const {
    Vector<char> variables = this->getVariables();

    return variables.size();
}

Expression::RPN& Expression::getRPN() const {
    Stack<char> operators;
    Vector<string> rpnElements;
    string strTemp;
    int i, j, cmp, assoc;
    char c, top;

    for (i = 0; i < (this->expression).length(); ++i) {
        c = this->expression[i];

        if (this->isVariable(c)) {
            rpnElements.push_back(string(1, c));
        } else if (this->isNumber(c)) {
            j = i + 1;
            while (this->isNumber(c = this->expression[j])) {
                ++j;
            }
            rpnElements.push_back((this->expression).substr(i, j - i));
            i = j - 1;
        } else if (isOperator(c)) {

            if (c == Operators::RIGHT_PARENTHESIS) {
                while (!operators.empty() and (top = operators.top()) != Operators::LEFT_PARENTHESIS) {
                    rpnElements.push_back(string(1, top));
                    operators.pop();
                }
                operators.pop();
            } else {
                while (!operators.empty() and 
                    (((assoc = this->getOperatorAssociativity(c)) == 1 and 
                    (cmp = this->compareOperatorPrecedence(c, (top = operators.top()))) < 1
                    ) or (assoc == -1 and cmp < 0))) {
                    if (!isParenthesis(c)) {
                        rpnElements.push_back(string(1, top));
                    }
                    operators.pop();
                }
                operators.push(c);
            }
        }
    }
    while (!operators.empty()) {
        rpnElements.push_back(string(1, operators.top()));
        operators.pop();
    }
    return *new RPN(rpnElements);
}

double Expression::eval(Vector<Pair<char, double> > values) const {
    Stack<double> evalStack;
    Vector<string> rpnElements = (this->getRPN()).getElements();
    double operandX, operandY, result;
    string s;
    char c;
    int i, j, pos;

    for (i = 0; i < rpnElements.size(); ++i) {
        s = rpnElements[i];

        if (this->isNumber(s)) {
            evalStack.push(this->toNumber(s));
        } else if (s.size() == 1) {
            c = s[0];

            if (this->isVariable(c)) {
                for (j = 0; j < values.size(); ++j) {
                    if (values[j].x == c) {
                        evalStack.push(values[j].y);
                        break;
                    }
                }
            } else if (isOperator(c)) {
                operandY = evalStack.top();
                evalStack.pop();
                operandX = evalStack.top();
                evalStack.pop();

                if (c == Operators::SUM) {
                    result = operandX + operandY;
                } else if (c == Operators::SUBTRACTION) {
                    result = operandX - operandY;
                } else if (c == Operators::MULTIPLICATION) {
                    result = operandX * operandY;
                } else if (c == Operators::DIVISION) {
                    result = operandX / operandY;
                } else if (c == Operators::POWER) {
                    result = pow(operandX, operandY);
                }
                evalStack.push(result);
            }
        }
    }
    result = evalStack.top();
    evalStack.pop();
    return result;
}

/* --------------------------------------------------------------------------------------------------- //
                                CORRIDAS DE LOS CASOS TÍPICOS
------------------------------------------------------------------------------------------------------ // 

1. f(x) = 3 *X
    Valor de "x": 2
    Expresion en Infijo: 3*x
    Expresion en Postfijo: 3x*
    Resultado de Evaluacion: 6.000000

2. f(x) = 3 *X + 1
    Valor de "x": 7
    Expresion en Infijo: 3*x+1
    Expresion en Postfijo: 3x*1+
    Resultado de Evaluacion: 22.000000

3. f(x) = ( 3* X ) + ( 1/4 )
    Valor de "x": 4
    Expresion en Infijo: (3*x)+(1/4)
    Expresion en Postfijo: 3x*14/+
    Resultado de Evaluacion: 12.250000

4. f(x) = ( 3 + X ) * ( X + 4 )
    Valor de "x": 3.5
    Expresion en Infijo: (3+x)*(x+4)
    Expresion en Postfijo: 3x+x4+*
    Resultado de Evaluacion: 48.750000

5. f(x) = X + ( 1 – (3*X + 4) )
    Valor de "x": 23
    Expresion en Infijo: x+(1-(3*x+4))
    Expresion en Postfijo: x13x*4+-+
    Resultado de Evaluacion: -49.000000

6. F(x) = (9* X * 2)
    Valor de "x": 10
    Expresion en Infijo: (9*x*2)
    Expresion en Postfijo: 9x*2*
    Resultado de Evaluacion: 180.000000

7. F(x) = (9* X * 2) / 5
    Valor de "x": 3
    Expresion en Infijo: (9*x*2)/5
    Expresion en Postfijo: 9x*2*5/
    Resultado de Evaluacion: 10.800000

8. F(x) = (9 / 5) / (X / 5)
    Valor de "x": 7.5
    Expresion en Infijo: (9/5)/(x/5)
    Expresion en Postfijo: 95/x5//
    Resultado de Evaluacion: 1.200000

------------------------------------------------------------------------------------------------------ */